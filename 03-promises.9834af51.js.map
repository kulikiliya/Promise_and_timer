{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAaC,SAASC,cAAc,kBACpCC,EAAYF,SAASC,cAAc,iBACnCE,EAASH,SAASC,cAAc,mBAKxB,SAALG,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACpBC,YAAP,KACLH,EACFF,EAAQ,C,SAACH,E,MAAUC,IAEnBG,EAAO,C,SAACJ,E,MAAUC,GAAO,GAE1BA,EAAM,G,CAbAN,SAASC,cAAc,SA0C/Ba,iBAAiB,UAzBtB,SAAsBC,GACpBA,EAAMC,iBAEN,IAAIC,EAAgC,EAAnBlB,EAAWmB,MACxBC,EAA8B,EAAlBjB,EAAUgB,MACtBE,EAA6B,EAAfjB,EAAOe,MAEoB,GAAzCD,EAAc,GAAKE,EAAY,GAAKC,EAAc,EACpDC,EAAAxB,GAASyB,OAAOC,QAAQ,cAGX,IAAZ,IAAIC,EAAI,EAAGA,GAAKJ,EAAaI,GAAK,EAAG,CAGwBpB,EAAhDoB,EAFKP,EAAaE,EAAYK,GAGzCC,MAAK,EAACpB,SAAEA,EAAQC,MAAEA,MACjBe,EAAAxB,GAASyB,OAAOI,QAAQ,uBAAqBrB,QAAiBC,MAAU,IAEzEqB,OAAM,EAACtB,SAAEA,EAAQC,MAAEA,MAClBe,EAAAxB,GAASyB,OAAOC,QAAQ,sBAAoBlB,QAAeC,MAAU,G","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst firstDelay = document.querySelector('[name=\"delay\"]');\nconst delayStep = document.querySelector('[name=\"step\"]');\nconst amount = document.querySelector('[name=\"amount\"]')\nconst form = document.querySelector('.form')\n\n// создаем промис , который принимает в себя переменные функции createPromise\n// добавляем setTimeout, время = delay\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3; // рандомизатор для true или false\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({position, delay});\n      } else {\n        reject({position, delay});\n      }\n    }, delay);\n  });\n}\n\nfunction onSubmitForm(event) {\n  event.preventDefault() \n\n  let delayValue = firstDelay.value * 1; // первая задержка\n  let stepValue = delayStep.value * 1; // доп дилей \n  let amountValue = amount.value * 1; // количество запросов - сколько раз мы вызываем функцию \n\n  if (delayValue <  0 || stepValue < 0 || amountValue < 0) {\n    Notiflix.Notify.failure(\"Error\")\n  } else {\n    // перебираем запросы\nfor (let i = 1; i <= amountValue; i += 1) {\n    let promiseValue = delayValue + stepValue * i; //  считаем тотал задержку , которая идет потом как переменная для промиса. шаг i - position\n\n    createPromise(i, promiseValue)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n  }\n  }\n} \n\nform.addEventListener('submit', onSubmitForm)"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$firstDelay","document","querySelector","$47d4ff9957288465$var$delayStep","$47d4ff9957288465$var$amount","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","event","preventDefault","delayValue","value","stepValue","amountValue","$parcel$interopDefault","Notify","failure","i","then","success","catch"],"version":3,"file":"03-promises.9834af51.js.map"}